[{"title":"","date":"2019-10-17T02:43:55.211Z","path":"2019/10/17/Vue基础/","text":"Vue基础1、Vue是什么​ Vue.js是一套构建用户界面的渐进式框架，Vue采用自下向上增量开发的设计，同时Vue完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。 2、Vue的特点 响应式数据 数据驱动视图 可以让我们只关注数据 Vue中数据是响应式的 =&gt; 数据变化 =&gt; 视图一定变化 MVVM 双向绑定=&gt;数据 &lt;=&gt; 视图，数据变化&lt;==&gt;视图变化 指令 增强了HTML功能 新特性，Vue扩展了HTML标签的功能 用指令 组件化开发 复用代码 =&gt; SPA =&gt; 10个页面 =&gt; 10个组件 3、基础实例12345678910111213&lt;body&gt; &lt;div id=\"app\"&gt; &#123;&#123;name&#125;&#125; &lt;!-- 插值表达式（会将绑定的数据实时的显示出来） --&gt; &lt;/div&gt; &lt;script src=\"./vue.js\"&gt;&lt;/script&gt; &lt;script&gt; new Vue(&#123; el:\"#app\", data:&#123;name:\"hello world\"&#125;, methods:&#123;&#125; &#125;); &lt;/script&gt;&lt;/body&gt; 参数：el：当前Vue所管理的HTML视图，通常是id选择器，不要让el管理的视图是HTML或者body ​ data：视图中绑定的数据必须显式的初始化到data中，数据对象的更新方式直接采用实例.属性 = 值 ​ methods：是一个对象，方法中的this自动绑定为Vue实例， ​ 注意：不应该使用箭头函数来定义method函数 ，理由是箭头函数绑定了父级作用域的上下文，所以this将不会按照期望指向Vue实例，this.属性名将是undefined 4、术语解释-指令 系统指令 v-text 和 v-html v-text：更新标签中的内容 v-text和插值表达式的区别 v-text更新整个标签中的内容 插值表达式：更新标签中局部的内容 v-html：更新标签中的内容/标签 可以渲染内容中的HTML标签 ​ 使用：尽量避免使用，容易造成危险（xss跨站脚本攻击） 1234567891011121314151617&lt;body&gt; &lt;div id=\"app\"&gt; &lt;p v-text=\"str\"&gt;&lt;/p&gt; //显示数据，类似innerText &lt;p v-html=\"strhtml\"&gt;&lt;/p&gt; //会把样式也加上去，类似innerHTML &lt;/div&gt; &lt;script src=\"./vue.js\"&gt;&lt;/script&gt; &lt;script&gt; new Vue(&#123; el: \"#app\", data: &#123; str: \"今天休息\", strhtml: \"&lt;span style='color:red'&gt;今天休息&lt;/span&gt;\" &#125;, methods: &#123;&#125; &#125;); &lt;/script&gt;&lt;/body&gt; 系统指令 v-if 和 v-show v-if和v-show后面的表达式返回的布尔值来决定该元素显示隐藏 注意：v-if是直接决定元素的添加或者删除，而v-show只是根据样式来决定显示隐藏 12345678910111213141516&lt;body&gt; &lt;div id=\"app\"&gt; &lt;p v-if=\"isShow\"&gt;我是内容&lt;/p&gt; //是直接删除或增加 &lt;p v-show=\"isShow\"&gt;我是内容&lt;/p&gt; //只是显示隐藏，display：none &lt;/div&gt; &lt;script src=\"./vue.js\"&gt;&lt;/script&gt; &lt;script&gt; let vm = new Vue(&#123; el: \"#app\", data: &#123; isShow: false &#125;, methods: &#123;&#125; &#125;); &lt;/script&gt;&lt;/body&gt; 系统指令 v-on 绑定事件 使用: 绑定 v-on:事件名.修饰符=”方法名” 可使用 @事件名=”方法名的方式” 如果只写方法名 不写括号 =&gt;方法中默认传入的第一个参数就是事件参数 =&gt;event 1234567891011121314151617181920212223&lt;body&gt; &lt;div id=\"app\"&gt; &lt;input type=\"text\" @change=\"fn\"&gt; &lt;button @click=\"fn1\"&gt;点击有惊喜&lt;/button&gt; &lt;/div&gt; &lt;script src=\"./vue.js\"&gt;&lt;/script&gt; &lt;script&gt; let vm = new Vue(&#123; el: \"#app\", data: &#123; name: \"今天是充满希望的一天\" &#125;, methods: &#123; fn() &#123; console.log(event.target.value) //事件参数e，target表示这个标签 &#125;, fn1() &#123; alert(vm.name); &#125; &#125; &#125;); &lt;/script&gt;&lt;/body&gt; 系统指令 v-for 数组 v-for 指令需要使用 item in items 或者 item of items 形式的特殊语法 循环生成谁,就在谁的标签上写v-for指令 123456789101112131415161718&lt;body&gt; &lt;div id=\"app\"&gt; &lt;ul&gt; &lt;li v-for=\"(item,index) in list\"&gt;&#123;&#123;item+\",\"+index&#125;&#125;&lt;/li&gt; &lt;!-- item:当前的每一个元素；index：当前的下标 --&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=\"./vue.js\"&gt;&lt;/script&gt; &lt;script&gt; let vm = new Vue(&#123; el: \"#app\", data: &#123; list: ['北京', '上海', '广州'] &#125;, methods: &#123;&#125; &#125;); &lt;/script&gt;&lt;/body&gt; ​","tags":[]},{"title":"test","date":"2019-10-11T13:39:14.000Z","path":"2019/10/11/test/","text":"","tags":[]},{"title":"Hello World","date":"2019-10-11T13:32:00.799Z","path":"2019/10/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]